(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{353:function(t,e,a){"use strict";a.r(e);var v=a(42),s=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("目录：\n")]),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#要点总结"}},[t._v("要点总结")])]),a("li",[a("a",{attrs:{href:"#详细解析"}},[t._v("详细解析")])]),a("li",[a("a",{attrs:{href:"#http状态码"}},[t._v("http状态码")])]),a("li",[a("a",{attrs:{href:"#http和https的区别"}},[t._v("http和https的区别")])]),a("li",[a("a",{attrs:{href:"#http缓存"}},[t._v("http缓存")])]),a("li",[a("a",{attrs:{href:"#http1-0-到-http1-1-到http2-0"}},[t._v("http1.0 到 http1.1 到http2.0")])]),a("li",[a("a",{attrs:{href:"#link-preload-的好处"}},[t._v("link preload 的好处")])]),a("li",[a("a",{attrs:{href:"#gpu-web性能优化"}},[t._v("GPU&web性能优化")])]),a("li",[a("a",{attrs:{href:"#如何减少页面的回流"}},[t._v("如何减少页面的回流")])]),a("li",[a("a",{attrs:{href:"#requestanimationframe-和-settimeout区别"}},[t._v("requestAnimationFrame 和 setTimeout区别")])]),a("li",[a("a",{attrs:{href:"#重绘与回流"}},[t._v("重绘与回流")])])])]),a("p"),t._v(" "),a("h3",{attrs:{id:"要点总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#要点总结"}},[t._v("#")]),t._v(" 要点总结")]),t._v(" "),a("ol",[a("li",[t._v("DNS解析：将域名解析成IP地址")]),t._v(" "),a("li",[t._v("建立TCP连接：TCP三次握手")]),t._v(" "),a("li",[t._v("TLS协商（仅https请求）")]),t._v(" "),a("li",[t._v("发送HTTP请求")]),t._v(" "),a("li",[t._v("服务器处理请求并返回HTTP报文")]),t._v(" "),a("li",[t._v("浏览器解析渲染页面")]),t._v(" "),a("li",[t._v("断开连接：TCP四次挥手")])]),t._v(" "),a("h3",{attrs:{id:"详细解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#详细解析"}},[t._v("#")]),t._v(" 详细解析")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("url的定义（Uniform Resource Locator 统一资源定位符），用于定位互联网上的资源，以下面这个为例：")]),t._v(" "),a("div",{staticClass:"language-s extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument\n")])])]),a("ul",[a("li",[a("p",[a("code",[t._v("http")]),t._v("是协议。它表明了浏览器必须使用哪一种协议，通常为http协议和https协议。"),a("a",{attrs:{href:"#http%E5%92%8Chttps%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("http和https的区别")]),t._v("\nweb浏览器中常见的是这种，浏览器也知道如何处理其他协议，比如："),a("code",[t._v("mailto:(打开邮件客户端)")]),t._v("或者"),a("code",[t._v("ftp:(处理文件传输)")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("www.example.com")]),t._v("是域名。它表明正在请求哪个web服务器。或者可以直接使用IP address。DNS（DomainName System 域名系统）的作用就是将域名映射到服务对应的ip地址。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("80")]),t._v("是端口。它表示用于访问web服务器伤的资源的技术“门”。如果web服务没有特别指出端口，则使用HTTP协议的默认端口（HTTP：80，HTTPS：443）。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("/path/to/myfile.html")]),t._v("是网络服务器上资源的路径。在web的早起阶段，这种路径表示web服务器上物理文件的位置。但是如今，它主要是由没有任何物理实现的web服务器处理的抽象。例如单页面应用的路径并不能表示物理位置，而是运行js代码加载的相对应的资源。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("?key1=value1&key2=value2")]),t._v("是提供给网络服务器的额外参数。在返回资源之前，web服务器可以使用这些参数来执行额外的操作。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("#SomewhereInTheDocument")]),t._v("是资源身的另一部分的锚点，表示资源中的一种“书签“。比如：在html文档上，浏览器将滚动到定义锚点的位置；在视屏音频文档上，浏览器将尝试转到锚点所代表的时间。且：#后面的内容（片段标志符）不会被发送到请求的服务器,以下图为例，刷新该地址，http请求中并不会将锚点后的内容向服务器进行请求。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/url.png",alt:"url"}}),t._v(" "),a("img",{attrs:{src:"/images/http.png",alt:"http请求"}})])]),t._v(" "),a("li",[a("p",[t._v("域名与DNS(DomianName System)")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("域名为互联网可用的网页服务器提供了方便人类理解的地址。当你在注册商那注册了一个域名，几个小时内，所有的DNS服务器都会收到你的DNS信息。我们在访问一个域名的时候，通常会向网络服务商的最底层的DNS服务器查询域名，如果没有查询到，就会去上一级的服务器查询，一直到从顶级服务器中查询到你的域名为止。并且这个结果，会缓存在底层的DNS服务器里。")])]),t._v(" "),a("li",[a("p",[t._v("DNS请求的工作流程：")]),t._v(" "),a("div",{staticClass:"language-s extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. 在你的浏览器地址栏输入baidu.com\n2. 浏览器询问计算机是否已经已经识别此域名所确定的IP地址（使用本地DNS缓存）。\n   如果是的话，这个域名就会被转换为IP地址，然后浏览器与网络服务器交换内容，结束域名解析流程。\n3. 如果你的计算机不知道baidu.com域名背后的IP,它会询问一个DNS服务器，这个服务器的功能就是告诉你的计算机已经注册的域名所匹配的IP.\n4. 然后计算机就知道了要请求的IP地址，你的浏览器能够与网络服务器建立连接\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("TCP握手")]),t._v(" "),a("p",[t._v("握手过程：")]),t._v(" "),a("div",{staticClass:"language-s extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("1. 客户端发送一个带SYN=1，Seq=X的数据包到服务器端口（第一次握手，由浏览器发起，告诉服务器我要发送请求了）\n2. 服务器收到这个数据包之后，发回一个带SYN=1,ACK=X+1,Seq=Y的响应包，传达确认信息（第二次握手，由服务器发起，告诉浏览器我准备接受请求了，你可以发送了）\n3. 客户端再回传一个带ACK=Y+1,Seq=Z的数据包，代表“握手结束”，连接建立成功，开始数据传输（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）\n")])])]),a("p",[t._v("三次握手的原因：")]),t._v(" "),a("div",{staticClass:"language-s extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。\n")])])])]),t._v(" "),a("li",[a("p",[t._v("TLS协商。为了在https上建立安全连接，我们需要进行TLS协商。它会决定服务端和客户端进行通信加密使用的秘钥，传播公钥时使用的是非对称加密，然后传输数据时，使用对称加密。")])]),t._v(" "),a("li",[a("p",[t._v("在浏览器和服务器之间，有许多的计算机和其它设备转发了http消息，比如你的路由器、网线。这些主要出现在传输层、网络层和物理层上，所以你的宽带网速，也很大程度上的影响了你网页的加载速度。但是在这中间，我们可能会通过代理，去向服务器请求我们需要的资源。目前适用范围最广的代理是：nginx。")]),t._v(" "),a("p",[t._v("nginx代理服务器的主要作用：")]),t._v(" "),a("ul",[a("li",[t._v("缓存，但是当cache control: privite时，不允许代理服务器进行缓存")]),t._v(" "),a("li",[t._v("过滤（像反病毒扫描，家长控制）")]),t._v(" "),a("li",[t._v("负载均衡（让多个服务器服务不同的请求）")]),t._v(" "),a("li",[t._v("认证（对不同资源进行权限管理）")]),t._v(" "),a("li",[t._v("日志记录（允许存储历史信息）")])])]),t._v(" "),a("li",[a("p",[t._v("http请求")]),t._v(" "),a("p",[t._v("一旦我们建立了到web服务器的连接，浏览器就代表用户发送了一个初始的HTTP GET请求，对于网站来说，这个请求通常是一个HTML文件。一旦服务器收到请求，它将使用相应的响应头和html的内容进行回复。")])]),t._v(" "),a("li",[a("p",[t._v("TCP慢开始/14kb规则。 第一个响应包的大小是14kb。这是慢开始的一部分，慢开始是一种均衡网络连接速度的算法，慢开始逐渐增加发送数据的数量直到达到网络的最大带宽。在收到初始包之后，服务器会将下一个包的大小加倍到28kb，然后后续包依次是前一个包大小的2倍，直到到达预定的阈值或者遇到堵塞。")])]),t._v(" "),a("li",[a("p",[t._v("一旦浏览器收到数据的第一块，它就可以开始解析收到的信息。这就是为什么在前14kb中包含浏览器开始渲染页面所需的所有内容，至少包含页面模板（第一次渲染所需的css和html）对于web性能优化来说至关重要。")])]),t._v(" "),a("li",[a("p",[t._v("浏览器解析过程：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("处理HTML标签并构造DOM树。良好的文档格式，有利于加快dom树的解析速度。dom节点的数量越多，构建dom树需要的时间就越长。DOM树解析的过程是一个深度优先遍历，会先构建初当前节点的所有字节点，再构建下一个兄弟节点。")])]),t._v(" "),a("li",[a("p",[t._v("当解析器发现非阻塞资源例如图片或者css文件时，解析也可以继续进行。但是对于"),a("code",[t._v("<script>")]),t._v("标签(特别说没有async或者dfer属性的script标签),会阻塞渲染并停止HTML的解析。可以使用"),a("code",[t._v('<link rel="preload" href="main.js" as="script">')]),t._v(" link的rel属性配置预加载，这样在随后的页面渲染中，一旦需要使用到它们，它们就立刻可用，不需要停止html解析")])]),t._v(" "),a("li",[a("p",[t._v("接下来是处理css并构建CSSOM树。（尽量避免使用后代选择器，因为css树计算时，先匹配后代，再对父元素进行匹配，相对于具名类选择器来说，性能非常的差）")])]),t._v(" "),a("li",[a("p",[t._v("当css被解析并创建COSSOM时，js文件被解释、编译和执行。脚本被解析为抽象语法树（Abstract Syntax Tree）.一些浏览器引擎使用AST并将其传递到解释器中，输出在主线程执行的字节码。这就是js编译的过程。")])]),t._v(" "),a("li",[a("p",[t._v("浏览器还会构建辅助设备用户分析和解释内容的辅助功能树-可访问性对象模型（AOM）类似DOM的语义版本，这也是为什么我们在开发网页的时候，推荐使用语义化的标签，更加有利于构建清晰的可访问对象。在构建AOM之前，屏幕阅读器无法访问内容")])]),t._v(" "),a("li",[a("p",[t._v("dom树和cssom树构造完毕以后，浏览器会将DOM树和cssom树组合成一个Render树，计算render树从dom树的根开始构建，遍历每个可见节点。（display:none的节点不会出现在render树上，visibility:hidden的节点会出现在render树上,且会占用空间）。render树会将所有相关样式匹配到dom树中的每个可见节点，并根据css的层级确定每个节点的样式。")])]),t._v(" "),a("li",[a("p",[t._v("接下来是在渲染树上运行布局以计算每个节点的几何体。第一次确定节点的大小和位置称为布局。随后对节点的大小和位置的重新计算称为回流。为了确定每个DOM节点的确切大小和位置。浏览器会从渲染树的根开始遍历，因此布局和回流是十分耗费性能的。")])]),t._v(" "),a("li",[a("p",[t._v("最后一步是将各个节点绘制到屏幕上。在绘制阶段，浏览器将把元素的每个可视化部分绘制到屏幕上。绘制可以将布局树中的元素分解为多个层，将内容提升到GPU上的层，可以提高绘制和重绘的性能。层的确可以提高性能，但是它以内存管理为代价。所以不应该过度使用。")])]),t._v(" "),a("li",[a("p",[t._v("当文档的各个部分以不同的层绘制，互相重叠时，必须进行合成，以确保它们以正确的顺序绘制到屏幕上。")])]),t._v(" "),a("li",[a("p",[t._v("一旦主线绘制页面完成，如果主线程正在解析、编译和执行js，则此时页面还是无法及时响应用户交互，当相关js执行完毕，页面进入可交互状态。")])]),t._v(" "),a("li",[a("p",[t._v("到此，一个完整的页面加载完毕。为了不需要每请求一个http就要建立一个tcp连接，http1.1提出了HTTP keep-alive，只要任意一段没有明确提出断开连接，则保持TCP连接状态。")])]),t._v(" "),a("li",[a("p",[t._v("在http1.0时期，http请求完毕，tcp连接关闭。开始四次挥手：")]),t._v(" "),a("ul",[a("li",[t._v("第一次挥手，由浏览器发起，告诉服务器：我请求报文发送完了，你准备关闭吧")]),t._v(" "),a("li",[t._v("第二次挥手，由服务器发起，告诉浏览器：我请求报文接收完了，我准备关闭了，你也准备吧")]),t._v(" "),a("li",[t._v("第三次挥手，由服务器发起，告诉浏览器：我响应报文发送完了，你准备关闭吧")]),t._v(" "),a("li",[t._v("第四次挥手，由浏览器发起，告诉服务器：我响应报文接收完了，我准备关闭了，你也准备吧。然后服务器收到挥手后，关闭连接。然后浏览器还等待一定时间未收到回复，则正常关闭。")])])])])])]),t._v(" "),a("h3",{attrs:{id:"http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" http状态码")]),t._v(" "),a("h3",{attrs:{id:"http和https的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别"}},[t._v("#")]),t._v(" http和https的区别")]),t._v(" "),a("h3",{attrs:{id:"http缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[t._v("#")]),t._v(" http缓存")]),t._v(" "),a("h3",{attrs:{id:"http1-0-到-http1-1-到http2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-到-http1-1-到http2-0"}},[t._v("#")]),t._v(" http1.0 到 http1.1 到http2.0")]),t._v(" "),a("h3",{attrs:{id:"link-preload-的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link-preload-的好处"}},[t._v("#")]),t._v(" link preload 的好处")]),t._v(" "),a("ul",[a("li",[t._v("更加精确的优化资源加载优先级")]),t._v(" "),a("li",[t._v("匹配未来的加载需求，在适当的情况下，重复利用同一资源")]),t._v(" "),a("li",[t._v("为资源应用正确的内容安全策略")]),t._v(" "),a("li",[t._v("为资源设置正确的Accept请求头")])]),t._v(" "),a("h3",{attrs:{id:"gpu-web性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gpu-web性能优化"}},[t._v("#")]),t._v(" GPU&web性能优化")]),t._v(" "),a("h3",{attrs:{id:"如何减少页面的回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何减少页面的回流"}},[t._v("#")]),t._v(" 如何减少页面的回流")]),t._v(" "),a("ul",[a("li",[t._v("事先设定好图片标签的大小，避免在图片加载完成后，获得图片大小触发回流")])]),t._v(" "),a("h3",{attrs:{id:"requestanimationframe-和-settimeout区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestanimationframe-和-settimeout区别"}},[t._v("#")]),t._v(" requestAnimationFrame 和 setTimeout区别")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/entry/6844903600557129736",target:"_blank",rel:"noopener noreferrer"}},[t._v("requestAnimationFrame"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"重绘与回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重绘与回流"}},[t._v("#")]),t._v(" 重绘与回流")])])}),[],!1,null,null,null);e.default=s.exports}}]);